#include<GL/freeglut.h>
#include<math.h>

//global variable declarations
bool isFullScreen = false;	//variable to toggle fullscreen

int main(int argc, char **argv)
{
	//function prototypes
	void display(void);
	void resize(int, int);
	void keyboard(unsigned char, int, int);
	void mouse(int, int, int, int);
	void initialize(void);
	void uninitialize(void);

	//code

	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA);
	glutInitWindowSize(800, 800);
	glutInitWindowPosition((glutGet(GLUT_SCREEN_WIDTH) / 2) - 400, (glutGet(GLUT_SCREEN_HEIGHT) / 2) - 400); //get height and width of screen and then find center coordinates
	glutCreateWindow("GLUT Applications");

	initialize();

	glutDisplayFunc(display);
	glutReshapeFunc(resize);
	glutKeyboardFunc(keyboard);
	glutMouseFunc(mouse);
	glutCloseFunc(uninitialize);
	glutMainLoop();

	//	return(0);
}

void display(void)
{
	void square(void);
	void Google(float);
	//code
	glClear(GL_COLOR_BUFFER_BIT);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();

	square();
	Google(0.5f);
	Google(0.45f);
	Google(0.4f);
	Google(0.35f);

	glutSwapBuffers();
}

void square(void)
{
	glBegin(GL_QUADS);
	glColor3f(1.0f, 10.f, 1.0f);
	glVertex3f(-0.7f, 0.7f, 0.0f);
	glVertex3f(-0.7f, -0.7f, 0.0f);
	
	glVertex3f(-0.7f, -0.7f, 0.0f);
	glVertex3f(0.7f, -0.7f, 0.0f);

	glVertex3f(0.7f, -0.7f, 0.0f);
	glVertex3f(0.7f, 0.7f, 0.0f);

	glVertex3f(0.7f, 0.7f, 0.0f);
	glVertex3f(-0.7f, 0.7f, 0.0f);

	glEnd();

}




void Google(float radius)	//Google sign
{
	const float PI = 3.1415f;
	GLint circle_points = 10000; // we can also give 100, 1000, 10000
	GLfloat angle;

	glLineWidth(50.0f);
	glEnable(GL_LINE_SMOOTH);	//smoothens out the line
	glBegin(GL_LINE_STRIP); 
	glColor3f(0.8352f, 0.0588f, 0.1450f);	//RED
	for (int i = 0; i < circle_points-4000; i++)
	{
		angle =  (PI) * i / circle_points;
		glVertex2f((radius*cos(angle+0.9f)), (radius*sin(angle+0.9f))); //value is added to angle to move the arc along the circle
	}
	glEnd();

	glBegin(GL_LINE_STRIP); 
	glColor3f(0.9333f, 0.6980f, 0.0666f);	//YELLOW
	for (int i = 7500; i < circle_points; i++)	//The greater the value of i, the smaller will be the length of the arc
	{
		angle = PI  * i / circle_points;
		glVertex2f((radius*cos(angle+0.4f)), (radius*sin(angle+0.4f)));
	}
	glEnd();

	glBegin(GL_LINE_STRIP);
	glColor3f(0.0f, .6f, 0.2235f);	//GREEN
	for (int i = 6000; i < circle_points; i++)
	{
		angle = (3*PI)/2  * i / circle_points;
		glVertex2f((radius*cos(angle + 0.7f)), (radius*sin(angle + 0.7f)));
	}
	glEnd();

	glBegin(GL_LINE_STRIP);	//BLUE
	glColor3f(0.2f, 0.4117f, 0.909f);	//google blue color code
	for (int i = 8200; i < circle_points; i++)
	{
		angle = PI * 2 * i / circle_points;
		glVertex2f((radius*cos(angle + 0.2f)), (radius*sin(angle + 0.2f)));
	}
	glEnd();
	
	/*
		Red: rgb(213,15,37) or Hex #d50f25

		Blue: rgb(51,105,232) or Hex #3369e8

		Green: rgb(0,153,57) or Hex #009939

		Yellow rgb(238,178,17) or Hex #eeb211
	
	*/

	//dash on G
	glBegin(GL_LINES);
	glColor3f(0.2f, 0.4117f, 0.909f);
	//3 lines to get the thickness of dash in G. As we have drawn G 3 times using 3 radiuses, we need to increase the thickness of the dash
	glVertex3f(0.0f, 0.0f, 0.0f);	//middle line
	glVertex3f(0.5f, 0.0f, 0.0f);

	glVertex3f(0.0f, 0.075f, 0.0f);	//top line
	glVertex3f(0.53f, 0.075f, 0.0f);

	glVertex3f(0.0f, -0.075f, 0.0f);	//bottom line
	glVertex3f(0.5f, -0.075f, 0.0f);

	glEnd();

}



void initialize(void)
{
	//code

	//to select clearing(background) clear
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
}

void keyboard(unsigned char key, int x, int y)
{
	//code

	switch (key)
	{
	case 27:	//Escape
		glutLeaveMainLoop();
		break;
	case 'F':
	case 'f':
		if (isFullScreen == false)
		{
			glutFullScreen();
			isFullScreen = true;

		}
		else
		{
			glutLeaveFullScreen();
			isFullScreen = false;

		}
		break;
	default:
		break;
	}
}

void mouse(int button, int state, int x, int y)
{
	//code

	switch (button)
	{
	case GLUT_LEFT_BUTTON:
		break;
	default:
		break;
	}
}

void resize(int width, int height)
{
	//code
	glViewport(0, 0, (GLsizei)width, (GLsizei)height);
}

void uninitialize(void)
{
	//code
}
