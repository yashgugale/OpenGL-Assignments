#include <windows.h>
#include <gl/GL.h>
#include <gl/GLU.h>
#include<math.h>

#define WIN_WIDTH 800
#define WIN_HEIGHT 800

#pragma comment(lib,"opengl32.lib")
#pragma comment(lib,"glu32.lib")

//Prototype Of WndProc() declared Globally
LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

//Global variable declarations
HWND ghwnd = NULL;
HDC ghdc = NULL;
HGLRC ghrc = NULL;

DWORD dwStyle;
WINDOWPLACEMENT wpPrev = { sizeof(WINDOWPLACEMENT) };

bool gbActiveWindow = false;
bool gbEscapeKeyIsPressed = false;
bool gbFullscreen = false;

float angle_pin = 0.0f;
int angle_rotate = 0;
float move_pin = 0.0f;
float ball_path = 1.0f;
GLUquadric *quadric = NULL;

//main()
//main()
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int iCmdShow)
{
	//function prototype
	void initialize(void);
	void uninitialize(void);
	void display(void);
	void update(void);

	//variable declaration
	WNDCLASSEX wndclass;
	HWND hwnd;
	MSG msg;
	TCHAR szClassName[] = TEXT("RTROGL");
	bool bDone = false;

	int xPos, yPos;
	MONITORINFO mi;
	mi = { sizeof(MONITORINFO) };

	//code

	//initializing members of struct WNDCLASSEX
	wndclass.cbSize = sizeof(WNDCLASSEX);
	wndclass.style = CS_HREDRAW | CS_VREDRAW | CS_OWNDC;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.hInstance = hInstance;
	wndclass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndclass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.lpfnWndProc = WndProc;
	wndclass.lpszClassName = szClassName;
	wndclass.lpszMenuName = NULL;

	//Registering Class
	RegisterClassEx(&wndclass);

	//Create Window
	hwnd = CreateWindowEx(WS_EX_APPWINDOW,
		szClassName,
		TEXT("OpenGL 3D"),
		WS_OVERLAPPEDWINDOW | WS_CLIPCHILDREN | WS_CLIPSIBLINGS | WS_VISIBLE,
		0,
		0,
		WIN_WIDTH,
		WIN_HEIGHT,
		NULL,
		NULL,
		hInstance,
		NULL);

	ghwnd = hwnd;

	//initialize
	initialize();

	ShowWindow(hwnd, SW_SHOW);
	SetForegroundWindow(hwnd);
	SetFocus(hwnd);

	GetMonitorInfo(MonitorFromWindow(hwnd, MONITORINFOF_PRIMARY), &mi);
	xPos = (mi.rcMonitor.right - mi.rcMonitor.left) / 2;
	yPos = (mi.rcMonitor.bottom - mi.rcMonitor.top) / 2;
	SetWindowPos(hwnd, HWND_TOP, xPos - 400, yPos - 300, 800, 600, SWP_NOZORDER | SWP_FRAMECHANGED);



	//Message Loop
	while (bDone == false)
	{
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			if (msg.message == WM_QUIT)
				bDone = true;
			else
			{
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}
		}
		else
		{
			if (gbActiveWindow == true)
			{
				update(); //We call update function to rotate the triangle and square here.
				display();
				if (gbEscapeKeyIsPressed == true)
					bDone = true;
			}
		}
	}

	uninitialize();
	return((int)msg.wParam);
}

//WndProc()
LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	//function prototype
	void resize(int, int);
	void ToggleFullscreen(void);
	void uninitialize(void);

	//code
	switch (iMsg)
	{
	case WM_ACTIVATE:
		if (HIWORD(wParam) == 0)
			gbActiveWindow = true;
		else
			gbActiveWindow = false;
		break;
	case WM_ERASEBKGND:
		return(0);
	case WM_SIZE:
		resize(LOWORD(lParam), HIWORD(lParam));
		break;
	case WM_KEYDOWN:
		switch (wParam)
		{
		case VK_ESCAPE:
			gbEscapeKeyIsPressed = true;
			break;
		case 0x46: //for 'f' or 'F'
			if (gbFullscreen == false)
			{
				ToggleFullscreen();
				gbFullscreen = true;
			}
			else
			{
				ToggleFullscreen();
				gbFullscreen = false;
			}
			break;
		default:
			break;
		}
		break;
	case WM_LBUTTONDOWN:
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	default:
		break;
	}
	return(DefWindowProc(hwnd, iMsg, wParam, lParam));
}

void ToggleFullscreen(void)
{
	//variable declarations
	MONITORINFO mi;

	//code
	if (gbFullscreen == false)
	{
		dwStyle = GetWindowLong(ghwnd, GWL_STYLE);
		if (dwStyle & WS_OVERLAPPEDWINDOW)
		{
			mi = { sizeof(MONITORINFO) };
			if (GetWindowPlacement(ghwnd, &wpPrev) && GetMonitorInfo(MonitorFromWindow(ghwnd, MONITORINFOF_PRIMARY), &mi))
			{
				SetWindowLong(ghwnd, GWL_STYLE, dwStyle & ~WS_OVERLAPPEDWINDOW);
				SetWindowPos(ghwnd, HWND_TOP, mi.rcMonitor.left, mi.rcMonitor.top, mi.rcMonitor.right - mi.rcMonitor.left, mi.rcMonitor.bottom - mi.rcMonitor.top, SWP_NOZORDER | SWP_FRAMECHANGED);
			}
		}
		ShowCursor(FALSE);
	}

	else
	{
		//code
		SetWindowLong(ghwnd, GWL_STYLE, dwStyle | WS_OVERLAPPEDWINDOW);
		SetWindowPlacement(ghwnd, &wpPrev);
		SetWindowPos(ghwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOOWNERZORDER | SWP_NOZORDER | SWP_FRAMECHANGED);

		ShowCursor(TRUE);
	}
}

void initialize(void)
{
	//function prototypes
	void resize(int, int);

	//variable declarations
	PIXELFORMATDESCRIPTOR pfd;
	int iPixelFormatIndex;

	//code
	ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));

	//Initialization of structure 'PIXELFORMATDESCRIPTOR'
	pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.cColorBits = 32;
	pfd.cRedBits = 8;
	pfd.cGreenBits = 8;
	pfd.cBlueBits = 8;
	pfd.cAlphaBits = 8;
	pfd.cDepthBits = 32;

	ghdc = GetDC(ghwnd);

	iPixelFormatIndex = ChoosePixelFormat(ghdc, &pfd);
	if (iPixelFormatIndex == 0)
	{
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	if (SetPixelFormat(ghdc, iPixelFormatIndex, &pfd) == FALSE)
	{
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	ghrc = wglCreateContext(ghdc);
	if (ghrc == NULL)
	{
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	if (wglMakeCurrent(ghdc, ghrc) == FALSE)
	{
		wglDeleteContext(ghrc);
		ghrc = NULL;
		ReleaseDC(ghwnd, ghdc);
		ghdc = NULL;
	}

	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);

	glClearDepth(1.0f); // set depth buffer
	glEnable(GL_DEPTH_TEST); // enable depth testing
	glDepthFunc(GL_LEQUAL); // type of depth testing

	resize(WIN_WIDTH, WIN_HEIGHT);
}

void display(void)
{
	//code
	void Bowling(void);
	void flooring(void);
	void ball(void);
	void dash(int);
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

	gluLookAt(0.0f, 1.0f, 12.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, 0.0f);

	/*
	//Draw Flooring
	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(0.0f, -5.0f, -25.0f);
	flooring();
	*/

	//Draw ball
	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(0.0f, -4.0f, -1.0f);
	glRotatef(angle_rotate, 0.0f, 0.0f, 1.0f);
	ball();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(0.0f, 0.0f, -100.0f);	//Send to Back - Draw pin 1
										//glRotatef(angle_Pyramid, 1.0f, 0.0f, 0.0f);	//Rotating the pins
	if (ball_path <= -14.0f)
		dash(1);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(-8.0f, 0.0f, -140.0f);		//Pin 2
	if (ball_path <= -20.0f)
		dash(2);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(8.0f, 0.0f, -140.0f);		//Pin 3
	if (ball_path <= -20.0f)
		dash(3);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(-16.0f, 0.0f, -180.f);		//Pin 4
	if (ball_path <= -25.0f)
		dash(4);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(0.0f, 0.0f, -180.0f);		//Pin 5
	if (ball_path <= -25.0f)
		dash(5);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(16.0f, 0.0f, -180.0f);		//Pin6
	if (ball_path <= -25.0f)
		dash(6);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(-24.0f, 0.0f, -220.2f);	//Pin 7 
	if (ball_path <= -30.0f)
		dash(7);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(-8.0f, 0.0f, -220.2f);		//Pin 8 
	if (ball_path <= -30.0f)
		dash(8);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(8.0f, 0.0f, -220.2f);		//Pin 9
	if (ball_path <= -30.0f)
		dash(9);
	Bowling();

	glMatrixMode(GL_MODELVIEW); // select modelview matrix
	glLoadIdentity(); // reset current modelview matrix
	glTranslatef(24.0f, 0.0f, -220.2f);		//Pin 10
	if (ball_path <= -30.0f)
		dash(10);
	Bowling();

	SwapBuffers(ghdc);

}

void resize(int width, int height)
{
	//code
	if (height == 0)
		height = 1;
	glViewport(0, 0, (GLsizei)width, (GLsizei)height);

	glMatrixMode(GL_PROJECTION); // select projection matrix
	glLoadIdentity(); // reset projection matrix

	gluPerspective(45.0f, (GLfloat)width / (GLfloat)height, 0.1f, 300.0f); // calculate the aspect ratio of the view
}

void uninitialize(void)
{
	//UNINITIALIZATION CODE

	if (gbFullscreen == true)
	{
		dwStyle = GetWindowLong(ghwnd, GWL_STYLE);
		SetWindowLong(ghwnd, GWL_STYLE, dwStyle | WS_OVERLAPPEDWINDOW);
		SetWindowPlacement(ghwnd, &wpPrev);
		SetWindowPos(ghwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOOWNERZORDER | SWP_NOZORDER | SWP_FRAMECHANGED);

		ShowCursor(TRUE);

	}

	wglMakeCurrent(NULL, NULL);

	wglDeleteContext(ghrc);
	ghrc = NULL;

	ReleaseDC(ghwnd, ghdc);
	ghdc = NULL;

	DestroyWindow(ghwnd);
	ghwnd = NULL;

	gluDeleteQuadric(quadric);
}

void Bowling(void)
{

	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f);	//Set color to white for the bowling pins
	quadric = gluNewQuadric();

	//draw the head of the pin
	glTranslatef(0.0f, 3.0f, 0.0f);
	glScalef(1.0f, 2.0f, 1.0f);
	gluSphere(quadric, 2.0f, 30, 30);
	glRotatef(90.0f, 1.0f, 0.0f, 0.0f);	//Rotate for the cylinder
	gluCylinder(quadric, 2.0f, 1.2f, 2.5f, 30, 30);
	glRotatef(-90.0f, 1.0f, 0.0f, 0.0f);	//Reset matrix after drawing cylinder
	glPopMatrix();

	//draw the red strip and curve
	glPushMatrix();
	glColor3f(1.0f, 0.0f, 0.0f);
	glTranslatef(0.0f, -0.2f, 0.0f);
	glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
	gluCylinder(quadric, 1.2f, 1.5f, 2.0f, 30, 30);
	glRotatef(-90.0f, 1.0f, 0.0f, 0.0f);	//Reset matrix after drawing cylinder
	glPopMatrix();

	//Draw the body of the pin
	glPushMatrix();
	glColor3f(1.0f, 1.0f, 1.0f);
	glTranslatef(0.0f, -2.0f, 0.0f);
	glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
	gluCylinder(quadric, 1.2f, 2.8f, 2.5f, 30, 30);
	glRotatef(-90.0f, 1.0f, 0.0f, 0.0f);

	glTranslatef(0.0f, -8.9f, 0.0f);
	glScalef(1.2f, 2.45f, 1.2f);
	gluSphere(quadric, 3.5f, 30, 30);
	glPopMatrix();

}

void flooring(void)
{
	glBegin(GL_QUADS);
	glColor3f(0.87f, 0.721f, 0.529f);
	glVertex3f(1.0f, -8.0f, -30.0f);
	glVertex3f(-1.0f, -8.0f, -30.0f);
	glVertex3f(-5.0f, -8.0f, 100.0f);
	glVertex3f(5.0f, -8.0f, 100.0f);
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(1.0f, 1.0f, 1.0f);
	glVertex3f(2.0f, -1.5f, -30.0f);
	glVertex3f(-2.0f, -1.5f, -30.0f);
	glVertex3f(-4.0f, -1.5f, 100.0f);
	glVertex3f(4.0f, -1.5f, 100.0f);
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(0.87f, 0.721f, 0.529f);
	glVertex3f(2.5f, -1.5f, -30.0f);
	glVertex3f(-2.5f, -1.5f, -30.0f);
	glVertex3f(-4.5f, -2.0f, 100.0f);
	glVertex3f(4.5f, -2.0f, 100.0f);
	glEnd();

	glBegin(GL_QUADS);
	glColor3f(1.0f, 1.0f, 1.0f);
	glVertex3f(3.0f, -1.5f, -30.0f);
	glVertex3f(-3.0f, -1.5f, -30.0f);
	glVertex3f(-5.0f, -2.5f, 100.0f);
	glVertex3f(5.0f, -2.5f, 100.0f);
	glEnd();

}

void ball(void)
{
	void ball_details(void);
	glColor3f(1.0f, 0.0f, 0.0f);
	quadric = gluNewQuadric();
//	glPushMatrix();
	glTranslatef(0.0f, 0.0f, ball_path);
	gluSphere(quadric, 2.0f, 30.f, 30.f);
//	ball_details();
//	glPopMatrix();
}
/*
void ball_details()
{
	const float PI = 3.1415f;
	GLint circle_points = 10000; // we can also give 100, 1000, 10000
	GLfloat angle;
	GLfloat x;
	GLfloat y;
	GLfloat radius;

	glLineWidth(5.0f);
	glEnable(GL_LINE_SMOOTH);	//smoothens out the line
	glBegin(GL_LINE_STRIP);
	x = 0.0f;
	y = 0.0f;
	radius = 0.5f;
	glColor3f(0.0f, 0.0f, 1.0f);	//RED
	for (int i = 0; i < circle_points; i++)
	{
		glVertex2f(x, y);
		angle = 2.0f * (PI)* i / circle_points;
		glVertex2f(x + (radius*cos(angle)), (radius*sin(angle))); //value is added to angle to move the arc along the circle
	}
	glEnd();
}
*/
void update(void)
{

	//code
	angle_pin = angle_pin - 0.5f;
	if (angle_pin <= -360.0f)
		angle_pin  = 0.0f;

	angle_rotate = (angle_rotate + 6) % 360;
	ball_path = ball_path - 0.015f;
	move_pin = move_pin + 0.005f;

}

void dash(int hit)
{
	if (hit == 1)
	{
		glRotatef(0.0f, 0.0f, 0.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, -1.0f, 0.0f, 0.0f);
	}
	else if (hit == 2)
	{
		glRotatef(45.0f, 0.0f, 0.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 0.0f, 0.0f, -1.0f);
	}
	else if (hit == 3)
	{
		glRotatef(-45.0f, 0.0f, 0.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, -1.0f, 0.0f, 0.0f);
	}
	else if (hit == 4)
	{
		glRotatef(45.0f, 1.0f, 0.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 0.0f, 0.0f, 1.0f);
	}
	else if (hit == 5)
	{
		glRotatef(-45.0f, 1.0f, 0.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 0.0f, 0.0f, 1.0f);
	}
	else if (hit == 6)
	{
		glRotatef(30.0f, 0.0f, 1.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 1.0f, 0.0f, 0.0f);
	}
	else if (hit == 7)
	{
		glRotatef(-30.0f, 0.0f, 1.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 0.0f, 0.0f, -1.0f);
	}
	else if (hit == 8)
	{
		glRotatef(45.0f, 1.0f, 1.0f, 0.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, -1.0f, 0.0f, 0.0f);
	}
	else if (hit == 9)
	{
		glRotatef(-45.0f, 0.0f, 1.0f, 1.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 1.0f, 0.0f, 0.0f);
	}
	else if (hit == 10)
	{
		glRotatef(-30.0f, 1.0f, 1.0f, 0.0f);
		glTranslatef(0.0f, move_pin, 0.0f);
		glRotatef((GLfloat)angle_pin, 0.0f, 0.0f, 1.0f);
	}
}