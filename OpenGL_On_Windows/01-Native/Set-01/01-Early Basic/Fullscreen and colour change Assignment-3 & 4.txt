#include<windows.h>

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

//For fullscreen
DWORD dwStyle;
WINDOWPLACEMENT wpPrev = { sizeof(WINDOWPLACEMENT) };
bool gbFullscreen = FALSE;

//I had not made it NULL here
HWND ghwnd = NULL;

//For painting
int giPaintFlag = -1;

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow)
{
	WNDCLASSEX wndclass;
	HWND hwnd;
	MSG msg;
	TCHAR szAppName[] = TEXT("MyApp");

	wndclass.cbSize = sizeof(WNDCLASSEX);
	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.lpfnWndProc = WndProc;
	wndclass.hInstance = hInstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndclass.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wndclass.lpszClassName = szAppName;
	wndclass.lpszMenuName = NULL;
	wndclass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);

	//ATOM creating call
	RegisterClassEx(&wndclass);

	//Creating Window
	hwnd = CreateWindowEx(
		WS_EX_APPWINDOW,	//To get the window over taskbar after fullscreen
		szAppName,
		TEXT("FullScreen and Colour change"),
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,	//used 368 here
		CW_USEDEFAULT,	//used 132 here
		CW_USEDEFAULT,	//used 800 here
		CW_USEDEFAULT,	//used 600 here
		NULL,
		NULL,
		hInstance,
		NULL);

	ghwnd = hwnd;	//Assigned here. Not assigned earlier

	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return((int)msg.wParam);
}
LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	void ToggleFullscreen(void);
	HDC hdc;
	PAINTSTRUCT ps;
	RECT rc;
	HBRUSH hBrush;
	TCHAR str1[255];

	switch (iMsg)
	{
	case WM_KEYDOWN:
		switch (LOWORD(wParam))
		{
		case VK_ESCAPE:
			DestroyWindow(hwnd);
			break;

		case 0x4b:
			giPaintFlag = 1;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x57:
			giPaintFlag = 2;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x52:
			giPaintFlag = 3;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x47:
			giPaintFlag = 4;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x42:
			giPaintFlag = 5;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x43:
			giPaintFlag = 6;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x4d:
			giPaintFlag = 7;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x59:
			giPaintFlag = 8;
			InvalidateRect(hwnd, NULL, TRUE);
			break;

		case 0x46:
			if (gbFullscreen == false)
			{
				ToggleFullscreen();
				gbFullscreen = true;
			}
			else
			{
				ToggleFullscreen();
				gbFullscreen = false;
			}
			break;

		default:
			wsprintf(str1, TEXT("No Colour for this key"));
			MessageBox(hwnd, str1, TEXT("Invalid"), MB_OKCANCEL);
			break;

		}

	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);
		GetClientRect(hwnd, &rc);

		if (giPaintFlag == 1)
		{
			hBrush = CreateSolidBrush(RGB(0, 0, 0));
			FillRect(hdc, &ps.rcPaint, hBrush);	//Used (HBRUSH) (COLOR_WINDOW +1) earlier. Hence colour always toggled to white on all keys
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 2)
		{
			hBrush = CreateSolidBrush(RGB(255, 255, 255));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 3)
		{
			hBrush = CreateSolidBrush(RGB(255, 0, 0));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 4)
		{
			hBrush = CreateSolidBrush(RGB(0, 255, 0));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 5)
		{
			hBrush = CreateSolidBrush(RGB(0, 0, 255));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 6)
		{
			hBrush = CreateSolidBrush(RGB(0, 255, 255));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 7)
		{
			hBrush = CreateSolidBrush(RGB(255, 0, 255));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else if (giPaintFlag == 8)
		{
			hBrush = CreateSolidBrush(RGB(255, 255, 0));
			FillRect(hdc, &ps.rcPaint, hBrush);
			DeleteObject(hBrush);
		}
		else
		{
			;
		}
		//DeleteObject must not be used after the if else ladder. There was error because of this.
		//		DeleteObject(hBrush);
		EndPaint(hwnd, &ps);
		break;

	case WM_DESTROY:
		PostQuitMessage(0);
		break;
	}
	return(DefWindowProc(hwnd, iMsg, wParam, lParam));

}

void ToggleFullscreen(void)
{
	//variable declarations
	MONITORINFO mi;

	//code
	if (gbFullscreen == false)
	{
		dwStyle = GetWindowLong(ghwnd, GWL_STYLE);
		if (dwStyle & WS_OVERLAPPEDWINDOW)
		{
			mi = { sizeof(MONITORINFO) };
			if (GetWindowPlacement(ghwnd, &wpPrev) && GetMonitorInfo(MonitorFromWindow(ghwnd, MONITORINFOF_PRIMARY), &mi))
			{
				SetWindowLong(ghwnd, GWL_STYLE, dwStyle & ~WS_OVERLAPPEDWINDOW);
				SetWindowPos(ghwnd, HWND_TOP, mi.rcMonitor.left, mi.rcMonitor.top, mi.rcMonitor.right - mi.rcMonitor.left, mi.rcMonitor.bottom - mi.rcMonitor.top, SWP_NOZORDER | SWP_FRAMECHANGED);
			}
		}
		ShowCursor(FALSE);
	}

	else
	{
		//code
		SetWindowLong(ghwnd, GWL_STYLE, dwStyle | WS_OVERLAPPEDWINDOW);
		SetWindowPlacement(ghwnd, &wpPrev);
		SetWindowPos(ghwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOOWNERZORDER | SWP_NOZORDER | SWP_FRAMECHANGED);

		ShowCursor(TRUE);
	}
}




