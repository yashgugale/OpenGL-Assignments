#include<windows.h>
#include<windowsx.h>	//To use GET_X_LPARAM and GET_Y_LPARAM functions

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpszCmdLine, int nCmdShow)
{
	WNDCLASSEX wndclass;
	HWND hwnd;
	MSG msg;
	TCHAR szAppName[] = TEXT("MyApp");

//	int num1 = 25;
//	int num2 = 75;
//	int num3 = num1 + num2;
//	TCHAR str[255];

	wndclass.cbSize = sizeof(WNDCLASSEX);
	wndclass.style = CS_HREDRAW | CS_VREDRAW;
	wndclass.cbClsExtra = 0;
	wndclass.cbWndExtra = 0;
	wndclass.lpfnWndProc = WndProc;
	wndclass.hInstance = hInstance;
	wndclass.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wndclass.hCursor = LoadCursor(NULL, IDC_ARROW);
	wndclass.hbrBackground = (HBRUSH)CreateSolidBrush(RGB(0,0,255));
	wndclass.lpszClassName = szAppName;
	wndclass.lpszMenuName = NULL;
	wndclass.hIconSm = LoadIcon(NULL, IDI_APPLICATION);

	RegisterClassEx(&wndclass);
	
	hwnd = CreateWindow(szAppName,
		TEXT("YSG"),
		WS_OVERLAPPEDWINDOW,
		368,
		132,
		800,
		600,
		NULL,
		NULL,
		hInstance,
		NULL);

	ShowWindow(hwnd, nCmdShow);
	UpdateWindow(hwnd);

//	wsprintf(str, TEXT("The sum of %d and %d is %d"), num1, num2, num3);
//	MessageBox(hwnd, str, TEXT("Sum of Two Numbers"), MB_OKCANCEL);

	while (GetMessage(&msg, NULL, 0, 0))
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	return((int)msg.wParam);
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT iMsg, WPARAM wParam, LPARAM lParam)
{
	TCHAR str1[255];
	switch (iMsg)
	{
		case WM_CREATE:
			wsprintf(str1, TEXT("Application requests a window to be created"));
			MessageBox(hwnd, str1, TEXT("WM_CREATE Message Box") , MB_OKCANCEL);
			break;

		case WM_LBUTTONDOWN:
			int xPos, yPos;
			xPos = GET_X_LPARAM(lParam);	//get x co-ordinate of left mouse click 
			yPos = GET_Y_LPARAM(lParam);	//get y co-ordinate of left mouse click
			wsprintf(str1, TEXT("The x and y co-ordinates of the left mouse click are (%d,%d)"), xPos, yPos);
			MessageBox(hwnd, str1, TEXT("Co-ordinates of Left Mouse CLick"), MB_OKCANCEL);
			break;

		case WM_KEYDOWN:
			switch (LOWORD(wParam))
			{
			case VK_ESCAPE:
				wsprintf(str1, TEXT("Escape Key is Pressed"));
				MessageBox(hwnd, str1, TEXT("ESC key"), MB_OKCANCEL);
				break;

			case 0x41:
				wsprintf(str1, TEXT("A key is pressed (Animation)"));
				MessageBox(hwnd, str1, TEXT("Animation"), MB_OKCANCEL);
				break;

			case 0x46:
				wsprintf(str1, TEXT("F key is pressed (FullScreen)"));
				MessageBox(hwnd, str1, TEXT("FullScreen"), MB_OKCANCEL);
				break;

			case 0x4c:
				wsprintf(str1, TEXT("L key is pressed (Lighting)"));
				MessageBox(hwnd, str1, TEXT("Lighting"), MB_OKCANCEL);
				break;

			case 0x54:
				wsprintf(str1, TEXT("T key is pressed (Texture)"));
				MessageBox(hwnd, str1, TEXT("Texture"), MB_OKCANCEL);
				break;

			case 0x51:
				wsprintf(str1, TEXT("Q key is pressed (Quit)"));
				MessageBox(hwnd, str1, TEXT("Quit"), MB_OKCANCEL);
				break;

			default:
				wsprintf(str1, TEXT("Invalid key"));
				MessageBox(hwnd, str1, TEXT("Invalid"), MB_OKCANCEL);
				break;
			}

		case WM_DESTROY:
			PostQuitMessage(0);
			break;
	}
	return(DefWindowProc(hwnd, iMsg, wParam, lParam));
}